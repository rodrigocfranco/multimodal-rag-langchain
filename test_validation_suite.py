#!/usr/bin/env python3
"""
üß™ SUITE DE VALIDA√á√ÉO - RAG Multimodal
Testa o sistema com perguntas dif√≠ceis e variadas baseadas nos documentos indexados

Documentos dispon√≠veis:
1. Artigo de Revis√£o - Nature Review Disease Primers - Nefrite L√∫pica.pdf
2. Artigo de Revis√£o - NEJM - Gamopatia Monoclonal de Significado Indeterminado.pdf
3. Artigo de Revis√£o - NEJM - S√≠ndrome de Lise Tumoral.pdf
4. Artigo de Revis√£o - Prostatite - JAMA.pdf
5. Diretriz Brasileira de Diabetes 2025 - Manejo da terapia antidiab√©tica no DM2.pdf
"""

import requests
import json
from datetime import datetime
from typing import List, Dict
import time

# ==============================================================================
# CONFIGURA√á√ÉO
# ==============================================================================

# URL da API (Railway ou local)
API_URL = "https://multimodal-rag-langchain-production.up.railway.app/query"
# API_URL = "http://localhost:5001/query"  # Descomente para testar local

# ==============================================================================
# DATASET DE TESTES - 30 PERGUNTAS ESTRAT√âGICAS
# ==============================================================================

TEST_QUERIES: List[Dict] = [
    # =========================================================================
    # CATEGORIA 1: DIABETES (Diretriz Brasileira) - 8 perguntas
    # =========================================================================
    {
        "id": "D1",
        "category": "Diabetes - Retrieval Direto",
        "question": "Quais s√£o os crit√©rios de muito alto risco cardiovascular segundo a diretriz brasileira de diabetes 2025?",
        "expected_topics": ["3 ou mais fatores", "Hipercolesterolemia Familiar", "albumin√∫ria >300", "TFG <30"],
        "difficulty": "F√°cil",
        "document": "Diretriz Brasileira de Diabetes 2025"
    },
    {
        "id": "D2",
        "category": "Diabetes - Valores Num√©ricos",
        "question": "Qual o valor de HbA1c que define controle glic√™mico inadequado e indica necessidade de intensifica√ß√£o terap√™utica?",
        "expected_topics": ["HbA1c", ">7%", "intensifica√ß√£o"],
        "difficulty": "M√©dio",
        "document": "Diretriz Brasileira de Diabetes 2025"
    },
    {
        "id": "D3",
        "category": "Diabetes - Contraindica√ß√µes",
        "question": "Em quais valores de TFG a Metformina √© contraindicada ou requer ajuste de dose?",
        "expected_topics": ["TFG <30", "contraindicada", "TFG 30-45", "ajuste"],
        "difficulty": "M√©dio",
        "document": "Diretriz Brasileira de Diabetes 2025"
    },
    {
        "id": "D4",
        "category": "Diabetes - Tratamento Complexo",
        "question": "Para pacientes com diabetes tipo 2 e risco cardiovascular muito alto, quais classes de antidiab√©ticos s√£o preferenciais al√©m da metformina?",
        "expected_topics": ["iSGLT2", "AR GLP-1", "benef√≠cio cardiovascular"],
        "difficulty": "M√©dio",
        "document": "Diretriz Brasileira de Diabetes 2025"
    },
    {
        "id": "D5",
        "category": "Diabetes - Multi-hop",
        "question": "Se um paciente tem albumin√∫ria de 350 mg/g e TFG de 42 ml/min, qual sua estratifica√ß√£o de risco e qual medicamento pode estar contraindicado?",
        "expected_topics": ["muito alto risco", "albumin√∫ria >300", "TFG <45", "metformina"],
        "difficulty": "Dif√≠cil",
        "document": "Diretriz Brasileira de Diabetes 2025"
    },
    {
        "id": "D6",
        "category": "Diabetes - Nega√ß√£o",
        "question": "Quando N√ÉO usar insulina como primeira linha no diabetes tipo 2?",
        "expected_topics": ["primeira linha", "metformina", "HbA1c <9%"],
        "difficulty": "Dif√≠cil",
        "document": "Diretriz Brasileira de Diabetes 2025"
    },
    {
        "id": "D7",
        "category": "Diabetes - Interpreta√ß√£o Coloquial",
        "question": "Qual rem√©dio √© melhor para quem √© gordo e tem diabetes?",
        "expected_topics": ["obesidade", "IMC", "iSGLT2", "AR GLP-1", "perda de peso"],
        "difficulty": "Dif√≠cil",
        "document": "Diretriz Brasileira de Diabetes 2025"
    },
    {
        "id": "D8",
        "category": "Diabetes - Rela√ß√£o Entre Conceitos",
        "question": "Qual a rela√ß√£o entre albumin√∫ria e risco cardiovascular em pacientes com diabetes?",
        "expected_topics": ["marcador", "les√£o endotelial", "risco cardiovascular", "muito alto"],
        "difficulty": "Dif√≠cil",
        "document": "Diretriz Brasileira de Diabetes 2025"
    },

    # =========================================================================
    # CATEGORIA 2: NEFRITE L√öPICA (Nature) - 6 perguntas
    # =========================================================================
    {
        "id": "NL1",
        "category": "Nefrite L√∫pica - Classifica√ß√£o",
        "question": "Qual a classifica√ß√£o simplificada de nefrite l√∫pica segundo a ISN/RPS?",
        "expected_topics": ["classe I", "classe II", "classe III", "classe IV", "classe V", "ISN/RPS"],
        "difficulty": "F√°cil",
        "document": "Nefrite L√∫pica"
    },
    {
        "id": "NL2",
        "category": "Nefrite L√∫pica - Diagn√≥stico",
        "question": "Quais os achados histopatol√≥gicos que definem nefrite l√∫pica classe IV?",
        "expected_topics": ["glomerulonefrite proliferativa difusa", "50%", "glom√©rulos"],
        "difficulty": "M√©dio",
        "document": "Nefrite L√∫pica"
    },
    {
        "id": "NL3",
        "category": "Nefrite L√∫pica - Tratamento",
        "question": "Qual o tratamento de indu√ß√£o padr√£o para nefrite l√∫pica proliferativa?",
        "expected_topics": ["micofenolato", "ciclofosfamida", "corticoides"],
        "difficulty": "M√©dio",
        "document": "Nefrite L√∫pica"
    },
    {
        "id": "NL4",
        "category": "Nefrite L√∫pica - Progn√≥stico",
        "question": "Quais fatores progn√≥sticos indicam pior evolu√ß√£o na nefrite l√∫pica?",
        "expected_topics": ["creatinina elevada", "hipertens√£o", "fibrose intersticial", "ra√ßa negra"],
        "difficulty": "M√©dio",
        "document": "Nefrite L√∫pica"
    },
    {
        "id": "NL5",
        "category": "Nefrite L√∫pica - Diferencia√ß√£o",
        "question": "Qual a diferen√ßa entre nefrite l√∫pica classe III e classe IV?",
        "expected_topics": ["focal", "difusa", "<50%", ">50%", "glom√©rulos"],
        "difficulty": "Dif√≠cil",
        "document": "Nefrite L√∫pica"
    },
    {
        "id": "NL6",
        "category": "Nefrite L√∫pica - Multi-hop",
        "question": "Por que pacientes com nefrite l√∫pica classe V t√™m protein√∫ria maci√ßa mas preservam melhor a fun√ß√£o renal inicialmente?",
        "expected_topics": ["membranosa", "pod√≥citos", "n√£o proliferativa", "s√≠ndrome nefr√≥tica"],
        "difficulty": "Muito Dif√≠cil",
        "document": "Nefrite L√∫pica"
    },

    # =========================================================================
    # CATEGORIA 3: MGUS (NEJM) - 5 perguntas
    # =========================================================================
    {
        "id": "MGUS1",
        "category": "MGUS - Diagn√≥stico",
        "question": "Quais os crit√©rios diagn√≥sticos para MGUS?",
        "expected_topics": ["prote√≠na M", "<3 g/dL", "plasm√≥citos <10%", "aus√™ncia de dano org√¢nico"],
        "difficulty": "F√°cil",
        "document": "MGUS"
    },
    {
        "id": "MGUS2",
        "category": "MGUS - Risco de Progress√£o",
        "question": "Qual o risco de progress√£o de MGUS para mieloma m√∫ltiplo?",
        "expected_topics": ["1% ao ano", "25 anos", "risco cumulativo"],
        "difficulty": "M√©dio",
        "document": "MGUS"
    },
    {
        "id": "MGUS3",
        "category": "MGUS - Fatores de Risco",
        "question": "Quais fatores de risco indicam maior probabilidade de progress√£o de MGUS?",
        "expected_topics": ["prote√≠na M >1.5", "IgA ou IgM", "rela√ß√£o kappa/lambda alterada"],
        "difficulty": "M√©dio",
        "document": "MGUS"
    },
    {
        "id": "MGUS4",
        "category": "MGUS - Seguimento",
        "question": "Como deve ser o seguimento de pacientes com MGUS de baixo risco?",
        "expected_topics": ["6 meses", "anual", "eletroforese", "sem tratamento"],
        "difficulty": "M√©dio",
        "document": "MGUS"
    },
    {
        "id": "MGUS5",
        "category": "MGUS - Diferencia√ß√£o",
        "question": "Qual a diferen√ßa entre MGUS e mieloma m√∫ltiplo smoldering?",
        "expected_topics": ["prote√≠na M", "plasm√≥citos", "10%", "dano org√¢nico", "CRAB"],
        "difficulty": "Dif√≠cil",
        "document": "MGUS"
    },

    # =========================================================================
    # CATEGORIA 4: S√çNDROME DE LISE TUMORAL (NEJM) - 5 perguntas
    # =========================================================================
    {
        "id": "SLT1",
        "category": "SLT - Defini√ß√£o",
        "question": "O que caracteriza a s√≠ndrome de lise tumoral?",
        "expected_topics": ["hiperuricemia", "hipercalemia", "hiperfosfatemia", "hipocalcemia", "quimioterapia"],
        "difficulty": "F√°cil",
        "document": "S√≠ndrome de Lise Tumoral"
    },
    {
        "id": "SLT2",
        "category": "SLT - Fisiopatologia",
        "question": "Qual o mecanismo fisiopatol√≥gico da hipocalcemia na s√≠ndrome de lise tumoral?",
        "expected_topics": ["hiperfosfatemia", "precipita√ß√£o", "c√°lcio-fosfato", "quela√ß√£o"],
        "difficulty": "M√©dio",
        "document": "S√≠ndrome de Lise Tumoral"
    },
    {
        "id": "SLT3",
        "category": "SLT - Preven√ß√£o",
        "question": "Como prevenir s√≠ndrome de lise tumoral em pacientes de alto risco?",
        "expected_topics": ["hidrata√ß√£o", "alopurinol", "rasburicase", "monitoriza√ß√£o"],
        "difficulty": "M√©dio",
        "document": "S√≠ndrome de Lise Tumoral"
    },
    {
        "id": "SLT4",
        "category": "SLT - Complica√ß√µes",
        "question": "Qual a complica√ß√£o mais grave da s√≠ndrome de lise tumoral e como preveni-la?",
        "expected_topics": ["insufici√™ncia renal aguda", "precipita√ß√£o", "hidrata√ß√£o", "diurese"],
        "difficulty": "M√©dio",
        "document": "S√≠ndrome de Lise Tumoral"
    },
    {
        "id": "SLT5",
        "category": "SLT - Tratamento Espec√≠fico",
        "question": "Quando usar rasburicase em vez de alopurinol na s√≠ndrome de lise tumoral?",
        "expected_topics": ["alto risco", "hiperuricemia grave", "defici√™ncia G6PD", "contraindica√ß√£o"],
        "difficulty": "Dif√≠cil",
        "document": "S√≠ndrome de Lise Tumoral"
    },

    # =========================================================================
    # CATEGORIA 5: PROSTATITE (JAMA) - 4 perguntas
    # =========================================================================
    {
        "id": "PROST1",
        "category": "Prostatite - Classifica√ß√£o",
        "question": "Quais os tipos de prostatite segundo a classifica√ß√£o NIH?",
        "expected_topics": ["tipo I", "tipo II", "tipo III", "tipo IV", "aguda", "cr√¥nica"],
        "difficulty": "F√°cil",
        "document": "Prostatite"
    },
    {
        "id": "PROST2",
        "category": "Prostatite - Diagn√≥stico",
        "question": "Como diferenciar prostatite bacteriana de s√≠ndrome de dor p√©lvica cr√¥nica?",
        "expected_topics": ["cultura", "leuc√≥citos", "EPS", "VB3", "Meares-Stamey"],
        "difficulty": "M√©dio",
        "document": "Prostatite"
    },
    {
        "id": "PROST3",
        "category": "Prostatite - Tratamento",
        "question": "Qual o tratamento de escolha para prostatite bacteriana aguda?",
        "expected_topics": ["fluoroquinolona", "trimetoprim-sulfametoxazol", "4-6 semanas"],
        "difficulty": "M√©dio",
        "document": "Prostatite"
    },
    {
        "id": "PROST4",
        "category": "Prostatite - Cr√¥nica",
        "question": "Por que a prostatite cr√¥nica √© dif√≠cil de tratar e qual a dura√ß√£o recomendada de antibi√≥tico?",
        "expected_topics": ["penetra√ß√£o prost√°tica", "barreira hematoprost√°tica", "6-12 semanas"],
        "difficulty": "Dif√≠cil",
        "document": "Prostatite"
    },

    # =========================================================================
    # CATEGORIA 6: QUERIES CROSS-DOCUMENT (Muito Dif√≠cil!) - 2 perguntas
    # =========================================================================
    {
        "id": "CROSS1",
        "category": "Cross-Document - Compara√ß√£o",
        "question": "Quais condi√ß√µes m√©dicas nos documentos est√£o associadas a risco de insufici√™ncia renal aguda?",
        "expected_topics": ["s√≠ndrome de lise tumoral", "nefrite l√∫pica", "diabetes com TFG baixa"],
        "difficulty": "Muito Dif√≠cil",
        "document": "M√∫ltiplos"
    },
    {
        "id": "CROSS2",
        "category": "Cross-Document - S√≠ntese",
        "question": "Compare as estrat√©gias de monitoramento de risco entre diabetes (risco cardiovascular) e MGUS (risco de progress√£o para mieloma)?",
        "expected_topics": ["estratifica√ß√£o", "seguimento", "fatores de risco", "periodicidade"],
        "difficulty": "Muito Dif√≠cil",
        "document": "M√∫ltiplos"
    },
]

# ==============================================================================
# FUN√á√ïES DE TESTE
# ==============================================================================

def query_api(question: str, api_url: str = API_URL) -> Dict:
    """Faz query na API e retorna resultado"""
    try:
        response = requests.post(
            api_url,
            json={"question": question},
            timeout=60
        )
        response.raise_for_status()
        return response.json()
    except Exception as e:
        return {"error": str(e), "answer": None}


def evaluate_answer(answer: str, expected_topics: List[str]) -> Dict:
    """
    Avalia resposta baseado em topics esperados
    Retorna score de 0-100 e topics encontrados
    """
    if not answer or "informa√ß√£o solicitada n√£o est√° presente" in answer.lower():
        return {
            "score": 0,
            "found_topics": [],
            "missing_topics": expected_topics,
            "status": "‚ùå N√ÉO RESPONDEU"
        }

    answer_lower = answer.lower()
    found_topics = []
    missing_topics = []

    for topic in expected_topics:
        # Verificar se topic est√° presente (case insensitive)
        if topic.lower() in answer_lower:
            found_topics.append(topic)
        else:
            missing_topics.append(topic)

    # Score baseado em % de topics encontrados
    score = int((len(found_topics) / len(expected_topics)) * 100) if expected_topics else 0

    # Determinar status
    if score >= 80:
        status = "‚úÖ EXCELENTE"
    elif score >= 60:
        status = "‚ö†Ô∏è BOM"
    elif score >= 40:
        status = "‚ö†Ô∏è PARCIAL"
    elif score > 0:
        status = "‚ùå INCOMPLETO"
    else:
        status = "‚ùå FALHOU"

    return {
        "score": score,
        "found_topics": found_topics,
        "missing_topics": missing_topics,
        "status": status
    }


def run_validation_suite(queries: List[Dict], api_url: str = API_URL):
    """Executa suite completa de valida√ß√£o"""

    print("=" * 80)
    print("üß™ INICIANDO SUITE DE VALIDA√á√ÉO - RAG MULTIMODAL")
    print("=" * 80)
    print(f"\nüìÖ Data/Hora: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê API URL: {api_url}")
    print(f"üìä Total de queries: {len(queries)}")
    print("\n" + "=" * 80 + "\n")

    results = []

    for i, test in enumerate(queries, 1):
        print(f"[{i}/{len(queries)}] {test['category']}")
        print(f"‚ùì {test['question']}")
        print(f"üìÑ Documento: {test['document']}")
        print(f"üéØ Dificuldade: {test['difficulty']}")

        # Fazer query
        start_time = time.time()
        response = query_api(test['question'], api_url)
        latency = time.time() - start_time

        # Avaliar resposta
        answer = response.get('answer', '')
        evaluation = evaluate_answer(answer, test['expected_topics'])

        # Armazenar resultado
        result = {
            **test,
            "answer": answer,
            "sources": response.get('sources', []),
            "chunks_used": response.get('chunks_used', 0),
            "latency": round(latency, 2),
            "evaluation": evaluation,
            "error": response.get('error')
        }
        results.append(result)

        # Mostrar resultado
        print(f"{evaluation['status']} (Score: {evaluation['score']}%)")
        print(f"‚è±Ô∏è  Latency: {latency:.2f}s")
        print(f"üìö Chunks: {result['chunks_used']}")

        if evaluation['found_topics']:
            print(f"‚úÖ Topics encontrados: {', '.join(evaluation['found_topics'])}")
        if evaluation['missing_topics']:
            print(f"‚ùå Topics faltando: {', '.join(evaluation['missing_topics'])}")

        if answer:
            print(f"üí¨ Resposta (preview): {answer[:150]}...")
        else:
            print(f"üí¨ Resposta: [ERRO ou SEM RESPOSTA]")
        print(f"üìñ Fontes: {', '.join(response.get('sources', []))}")
        print("\n" + "-" * 80 + "\n")

        # Pequena pausa entre queries
        time.sleep(0.5)

    # ===========================================================================
    # RELAT√ìRIO FINAL
    # ===========================================================================

    print("\n" + "=" * 80)
    print("üìä RELAT√ìRIO FINAL DE VALIDA√á√ÉO")
    print("=" * 80 + "\n")

    # Estat√≠sticas gerais
    total_queries = len(results)
    avg_score = sum(r['evaluation']['score'] for r in results) / total_queries
    avg_latency = sum(r['latency'] for r in results) / total_queries

    # Contar por status
    excelente = len([r for r in results if r['evaluation']['status'] == "‚úÖ EXCELENTE"])
    bom = len([r for r in results if r['evaluation']['status'] == "‚ö†Ô∏è BOM"])
    parcial = len([r for r in results if r['evaluation']['status'] == "‚ö†Ô∏è PARCIAL"])
    incompleto = len([r for r in results if r['evaluation']['status'] == "‚ùå INCOMPLETO"])
    falhou = len([r for r in results if r['evaluation']['status'] == "‚ùå FALHOU"])
    nao_respondeu = len([r for r in results if r['evaluation']['status'] == "‚ùå N√ÉO RESPONDEU"])

    print(f"üìà ACCURACY GERAL: {avg_score:.1f}%")
    print(f"‚è±Ô∏è  LATENCY M√âDIA: {avg_latency:.2f}s")
    print(f"\nüìä DISTRIBUI√á√ÉO DE RESULTADOS:")
    print(f"   ‚úÖ EXCELENTE (80-100%):  {excelente:2d} ({excelente/total_queries*100:.1f}%)")
    print(f"   ‚ö†Ô∏è  BOM (60-79%):        {bom:2d} ({bom/total_queries*100:.1f}%)")
    print(f"   ‚ö†Ô∏è  PARCIAL (40-59%):    {parcial:2d} ({parcial/total_queries*100:.1f}%)")
    print(f"   ‚ùå INCOMPLETO (1-39%):   {incompleto:2d} ({incompleto/total_queries*100:.1f}%)")
    print(f"   ‚ùå FALHOU (0%):          {falhou:2d} ({falhou/total_queries*100:.1f}%)")
    print(f"   ‚ùå N√ÉO RESPONDEU:        {nao_respondeu:2d} ({nao_respondeu/total_queries*100:.1f}%)")

    # Por categoria
    print(f"\nüìö PERFORMANCE POR CATEGORIA:")
    categories = {}
    for r in results:
        cat = r['category'].split(' - ')[0]  # Ex: "Diabetes" de "Diabetes - Retrieval"
        if cat not in categories:
            categories[cat] = []
        categories[cat].append(r['evaluation']['score'])

    for cat, scores in sorted(categories.items()):
        avg = sum(scores) / len(scores)
        print(f"   {cat:20s}: {avg:5.1f}% ({len(scores)} queries)")

    # Por dificuldade
    print(f"\nüéØ PERFORMANCE POR DIFICULDADE:")
    difficulties = {}
    for r in results:
        diff = r['difficulty']
        if diff not in difficulties:
            difficulties[diff] = []
        difficulties[diff].append(r['evaluation']['score'])

    for diff in ["F√°cil", "M√©dio", "Dif√≠cil", "Muito Dif√≠cil"]:
        if diff in difficulties:
            scores = difficulties[diff]
            avg = sum(scores) / len(scores)
            print(f"   {diff:15s}: {avg:5.1f}% ({len(scores)} queries)")

    # Top 5 melhores
    print(f"\nüèÜ TOP 5 MELHORES RESPOSTAS:")
    top_results = sorted(results, key=lambda x: x['evaluation']['score'], reverse=True)[:5]
    for i, r in enumerate(top_results, 1):
        print(f"   {i}. [{r['id']}] {r['question'][:60]}... ({r['evaluation']['score']}%)")

    # Top 5 piores
    print(f"\n‚ö†Ô∏è  TOP 5 PIORES RESPOSTAS:")
    worst_results = sorted(results, key=lambda x: x['evaluation']['score'])[:5]
    for i, r in enumerate(worst_results, 1):
        print(f"   {i}. [{r['id']}] {r['question'][:60]}... ({r['evaluation']['score']}%)")

    # Salvar resultados em JSON
    output_file = f"validation_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump({
            "summary": {
                "total_queries": total_queries,
                "avg_score": round(avg_score, 2),
                "avg_latency": round(avg_latency, 2),
                "distribution": {
                    "excelente": excelente,
                    "bom": bom,
                    "parcial": parcial,
                    "incompleto": incompleto,
                    "falhou": falhou,
                    "nao_respondeu": nao_respondeu
                },
                "by_category": {cat: round(sum(scores)/len(scores), 2) for cat, scores in categories.items()},
                "by_difficulty": {diff: round(sum(scores)/len(scores), 2) for diff, scores in difficulties.items()}
            },
            "results": results
        }, f, ensure_ascii=False, indent=2)

    print(f"\nüíæ Resultados salvos em: {output_file}")
    print("\n" + "=" * 80)

    # Interpreta√ß√£o final
    print("\nüéØ INTERPRETA√á√ÉO:")
    if avg_score >= 85:
        print("   ‚úÖ EXCELENTE! Sistema production-ready com alta precis√£o.")
    elif avg_score >= 75:
        print("   ‚ö†Ô∏è  BOM! Sistema funcional, mas pode melhorar com Contextual Retrieval.")
    elif avg_score >= 65:
        print("   ‚ö†Ô∏è  ACEIT√ÅVEL! Considere implementar HyDE e Contextual Retrieval.")
    else:
        print("   ‚ùå NECESSITA MELHORIAS! Priorize Contextual Retrieval urgentemente.")

    print("\n" + "=" * 80 + "\n")

    return results


# ==============================================================================
# MAIN
# ==============================================================================

if __name__ == "__main__":
    import sys

    # Permitir passar URL via argumento
    api_url = sys.argv[1] if len(sys.argv) > 1 else API_URL

    print("\nüöÄ Iniciando valida√ß√£o em 3 segundos...")
    time.sleep(3)

    results = run_validation_suite(TEST_QUERIES, api_url)

    print("\n‚úÖ Valida√ß√£o conclu√≠da!")
    print(f"üìä Verifique o arquivo JSON gerado para detalhes completos.")
