#!/usr/bin/env python3
"""
üîç TESTE DE RETRIEVAL DE IMAGENS - RAILWAY
Verifica se imagens est√£o sendo recuperadas corretamente

Uso: railway run python3 test_image_retrieval_railway.py
"""

import os
from dotenv import load_dotenv

load_dotenv()

PERSIST_DIR = os.getenv("PERSIST_DIR", "./knowledge")

print("=" * 80)
print("üîç TESTE DE RETRIEVAL DE IMAGENS")
print("=" * 80)

# ===========================================================================
# 1. VERIFICAR SE H√Å IMAGENS NO VECTORSTORE
# ===========================================================================
print("\n[1/4] Verificando imagens no vectorstore...")

try:
    from langchain_chroma import Chroma
    from langchain_openai import OpenAIEmbeddings

    vectorstore = Chroma(
        collection_name="knowledge_base",
        embedding_function=OpenAIEmbeddings(model="text-embedding-3-large"),
        persist_directory=PERSIST_DIR
    )

    # Buscar TODAS as imagens
    all_images = vectorstore.similarity_search(
        "",
        k=1000,
        filter={"type": "image"}
    )

    print(f"   ‚úì Total de imagens no vectorstore: {len(all_images)}")

    if len(all_images) == 0:
        print("\n   ‚ùå PROBLEMA: Nenhuma imagem encontrada!")
        print("   ‚Üí Imagens n√£o foram processadas ou n√£o t√™m type='image'")
        exit(1)

    # Mostrar sample
    print(f"\n   üìã Amostra de imagens:")
    for i, img in enumerate(all_images[:5], 1):
        source = img.metadata.get('source', 'unknown')
        doc_id = img.metadata.get('doc_id', 'N/A')
        summary = img.page_content[:150].replace('\n', ' ')
        print(f"   [{i}] {source}")
        print(f"       ID: {doc_id}")
        print(f"       Descri√ß√£o: {summary}...")
        print()

except Exception as e:
    print(f"   ‚úó Erro: {str(e)}")
    import traceback
    traceback.print_exc()
    exit(1)

# ===========================================================================
# 2. TESTAR QUERY ESPEC√çFICA (a do usu√°rio)
# ===========================================================================
print("\n[2/4] Testando query espec√≠fica...")

query = "explique a figura 1 do documento manejo de hiperglicemia hospitalar no doente n√£o cr√≠tico"
print(f"   Query: '{query}'")

# Buscar com similarity_search (sem filtro)
results_all = vectorstore.similarity_search(query, k=30)
print(f"   ‚úì Total de resultados (top-30): {len(results_all)}")

# Contar tipos
types_count = {}
for doc in results_all:
    doc_type = doc.metadata.get('type', 'unknown')
    types_count[doc_type] = types_count.get(doc_type, 0) + 1

print(f"   Distribui√ß√£o por tipo:")
for t, count in sorted(types_count.items()):
    print(f"      {t}: {count}")

# Verificar se h√° imagens nos resultados
image_results = [r for r in results_all if r.metadata.get('type') == 'image']
print(f"\n   {'‚úì' if image_results else '‚úó'} Imagens nos top-30: {len(image_results)}")

if image_results:
    print(f"\n   üì∏ Imagens encontradas:")
    for i, img in enumerate(image_results, 1):
        source = img.metadata.get('source', 'unknown')
        summary = img.page_content[:150].replace('\n', ' ')
        print(f"   [{i}] {source}")
        print(f"       Descri√ß√£o: {summary}...")
else:
    print(f"\n   ‚ùå PROBLEMA: Nenhuma imagem nos top-30 resultados!")
    print(f"   ‚Üí Query n√£o est√° fazendo match com descri√ß√µes das imagens")

# ===========================================================================
# 3. TESTAR QUERY ALTERNATIVA (mais gen√©rica)
# ===========================================================================
print("\n[3/4] Testando query alternativa...")

query_alt = "figura fluxograma algoritmo imagem hiperglicemia"
print(f"   Query: '{query_alt}'")

results_alt = vectorstore.similarity_search(query_alt, k=30)
image_results_alt = [r for r in results_alt if r.metadata.get('type') == 'image']

print(f"   {'‚úì' if image_results_alt else '‚úó'} Imagens nos top-30: {len(image_results_alt)}")

if image_results_alt:
    print(f"\n   üì∏ Imagens encontradas:")
    for i, img in enumerate(image_results_alt[:3], 1):
        source = img.metadata.get('source', 'unknown')
        summary = img.page_content[:150].replace('\n', ' ')
        print(f"   [{i}] {source}")
        print(f"       Descri√ß√£o: {summary}...")

# ===========================================================================
# 4. VERIFICAR DOCSTORE
# ===========================================================================
print("\n[4/4] Verificando docstore...")

import pickle

docstore_path = f"{PERSIST_DIR}/docstore.pkl"
if os.path.exists(docstore_path):
    with open(docstore_path, 'rb') as f:
        docstore = pickle.load(f)

    print(f"   ‚úì Docstore existe: {len(docstore)} entradas")

    # Contar imagens (base64)
    from base64 import b64decode
    image_count = 0
    for doc_id, content in docstore.items():
        if isinstance(content, str):
            try:
                decoded = b64decode(content[:100])
                if decoded.startswith(b'\xff\xd8\xff') or decoded.startswith(b'\x89PNG'):
                    image_count += 1
            except:
                pass

    print(f"   ‚úì Imagens no docstore: {image_count}")

    if image_count != len(all_images):
        print(f"\n   ‚ö†Ô∏è  ALERTA: Discrep√¢ncia!")
        print(f"      Vectorstore: {len(all_images)} imagens")
        print(f"      Docstore: {image_count} imagens")
        print(f"      ‚Üí Alguns doc_ids podem n√£o estar mapeados corretamente")
else:
    print(f"   ‚úó Docstore n√£o encontrado!")

# ===========================================================================
# DIAGN√ìSTICO FINAL
# ===========================================================================
print("\n" + "=" * 80)
print("üìã DIAGN√ìSTICO")
print("=" * 80)

if len(all_images) == 0:
    print("\n‚ùå CR√çTICO: Nenhuma imagem processada")
    print("   Solu√ß√£o: Reprocessar PDFs com adicionar_pdf.py")

elif len(image_results) == 0:
    print("\n‚ùå PROBLEMA: Imagens existem mas n√£o s√£o recuperadas")
    print(f"   ‚Ä¢ Total de imagens: {len(all_images)}")
    print(f"   ‚Ä¢ Imagens recuperadas: 0")
    print("\n   Poss√≠veis causas:")
    print("   1. Descri√ß√µes das imagens n√£o fazem match com a query")
    print("   2. Embeddings das imagens est√£o muito distantes da query")
    print("   3. Reranker est√° descartando imagens")
    print("\n   Solu√ß√µes:")
    print("   ‚Ä¢ Melhorar descri√ß√µes das imagens (GPT-4o Vision prompt)")
    print("   ‚Ä¢ Adicionar keywords expl√≠citas: 'FIGURA', 'ALGORITMO'")
    print("   ‚Ä¢ Aumentar k no retriever (30 ‚Üí 50)")
    print("   ‚Ä¢ Verificar se Cohere rerank est√° preservando imagens")

elif len(image_results) > 0 and len(image_results_alt) == 0:
    print("\n‚ö†Ô∏è  PARCIAL: Imagens recuperadas com query original mas n√£o com alternativa")
    print("   ‚Üí Descri√ß√µes s√£o muito espec√≠ficas (bom!)")

elif len(image_results) > 0:
    print("\n‚úÖ FUNCIONANDO: Imagens sendo recuperadas!")
    print(f"   ‚Ä¢ Total de imagens: {len(all_images)}")
    print(f"   ‚Ä¢ Imagens recuperadas: {len(image_results)}")
    print("\n   ‚ö†Ô∏è  MAS o sistema respondeu: 'A informa√ß√£o solicitada n√£o est√° presente'")
    print("\n   Poss√≠veis causas:")
    print("   1. Imagens recuperadas mas DEPOIS do rerank (Cohere)")
    print("   2. GPT-4o n√£o consegue ler as imagens (problema de convers√£o)")
    print("   3. Prompt do sistema est√° muito restritivo")
    print("\n   Pr√≥ximo teste:")
    print("   ‚Ä¢ Verificar endpoint /debug-retrieval com esta query")
    print("   ‚Ä¢ Ver se imagens sobrevivem ao rerank")

print("\n" + "=" * 80)
