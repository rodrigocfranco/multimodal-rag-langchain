#!/usr/bin/env python3
"""
Script de Teste de Stress para RAG System
Testa 48 perguntas progressivamente mais dif√≠ceis
"""

import requests
import json
import time
from datetime import datetime
from typing import Dict, List, Tuple
import sys

API_URL = "http://localhost:5001/query"
TIMEOUT = 30  # segundos

# Cores para terminal
class Colors:
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    BLUE = '\033[94m'
    BOLD = '\033[1m'
    END = '\033[0m'

# ========================================================================
# BANCO DE PERGUNTAS
# ========================================================================

PERGUNTAS = {
    "basicas": [
        "Qual o valor de TFG que define insufici√™ncia renal cr√¥nica?",
        "Em qual porcentagem a metformina reduz o risco de IAM segundo o UKPDS?",
        "Qual o alvo de HbA1c recomendado pela diretriz?",
        "Liste todos os iSGLT2 mencionados no documento",
        "Quais s√£o os crit√©rios de muito alto risco cardiovascular?",
        "Enumere os efeitos adversos da metformina",
    ],
    "negacoes": [
        "Quando N√ÉO usar metformina?",
        "Quais medicamentos N√ÉO s√£o recomendados em pacientes com TFG < 30?",
        "Em quais situa√ß√µes N√ÉO se deve fazer insulina como primeira linha?",
        "Existem casos onde HbA1c normal N√ÉO exclui o diagn√≥stico de diabetes?",
        "H√° situa√ß√µes em que controle glic√™mico rigoroso N√ÉO √© recomendado?",
        "TFG acima de 60 N√ÉO garante aus√™ncia de risco cardiovascular. Verdadeiro ou falso?",
    ],
    "relacoes": [
        "Qual a rela√ß√£o entre HbA1c elevada e complica√ß√µes microvasculares?",
        "Como a obesidade influencia a escolha do antidiab√©tico?",
        "Qual a conex√£o entre TFG reduzida e dosagem de metformina?",
        "Compare a efic√°cia de iSGLT2 vs GLP-1 em pacientes com DRC",
        "Qual a diferen√ßa entre monoterapia e terapia dupla inicial?",
        "Compare os alvos de HbA1c para pacientes jovens vs idosos",
    ],
    "contextuais": [
        "Qual a sequ√™ncia de escalonamento terap√™utico se o paciente falha na monoterapia?",
        "Descreva o algoritmo de escolha do antidiab√©tico em paciente com ICC",
        "Como ajustar a terapia se HbA1c permanecer > 7% ap√≥s 3 meses?",
        "Paciente com DM2, obesidade e HbA1c 8,5%. Qual terapia inicial recomendada?",
        "Mulher com DM2, TFG 25 ml/min e DCV pr√©via. Posso usar metformina?",
        "Idoso fr√°gil, HbA1c 9%, sem DCV. Qual meta glic√™mica adequada?",
    ],
    "ambiguas": [
        "Quais os benef√≠cios dos iSGLT2?",
        "Como tratar diabetes?",
        "O que diz sobre insulina?",
        "Qual a dose m√°xima de iSGLT2 em pacientes com TFG < 15?",
        "A metformina √© recomendada em gestantes com DM2?",
        "HbA1c abaixo de 5% √© o alvo ideal?",
    ],
    "armadilhas": [
        "Qual o custo m√©dio do tratamento com iSGLT2 no Brasil?",
        "Quantos pacientes foram inclu√≠dos no estudo UKPDS?",
        "Qual a preval√™ncia de DM2 no Brasil segundo a diretriz?",
        "Quais s√£o os crit√©rios da ADA para diagn√≥stico de diabetes?",
        "O que a diretriz europeia recomenda sobre metformina?",
        "Como a OMS define s√≠ndrome metab√≥lica?",
    ],
    "extremas": [
        "Em um paciente de 65 anos, com DM2 h√° 10 anos, HbA1c 8,2%, IMC 32, TFG 45 ml/min, com hist√≥rico de IAM h√° 2 anos, atualmente em uso de metformina 2g/dia, qual seria a melhor op√ß√£o de escalonamento terap√™utico segundo a diretriz brasileira considerando o perfil de risco cardiovascular muito alto e a presen√ßa de doen√ßa renal cr√¥nica moderada?",
        "Quais s√£o as contraindica√ß√µes da metformina E dos iSGLT2 E quando cada um deve ser preferido?",
        "Liste os valores de TFG para cada est√°gio de DRC, as restri√ß√µes medicamentosas correspondentes e os ajustes de dose necess√°rios para metformina em cada caso.",
        "Qual a diferen√ßa entre clearance de creatinina e taxa de filtra√ß√£o glomerular estimada?",
        "O que √© prontid√£o terap√™utica e por que √© importante no DM2?",
        "Explique a rela√ß√£o entre in√©rcia cl√≠nica e controle glic√™mico inadequado",
    ],
    "humanas": [
        "Meu paciente t√° com a√ß√∫car de 8 e pouco na hemoglobina. O que fa√ßo?",
        "Posso dar metformina pra quem tem problema no rim?",
        "Qual rem√©dio √© melhor pra quem √© gordo e tem diabetes?",
        "Sou diab√©tico e minha HbA1c est√° em 7,5%. Preciso aumentar o rem√©dio?",
        "Tenho um paciente com DM2 novo. Por onde come√ßar o tratamento?",
        "Posso usar insulina logo de cara ou tem que tentar comprimido primeiro?",
    ],
}

# Smoke test: 10 perguntas cr√≠ticas (uma de cada categoria + extras)
SMOKE_TEST = [
    ("basicas", 0),      # Q1: Valor TFG
    ("basicas", 3),      # Q4: Lista iSGLT2
    ("negacoes", 0),     # Q7: Quando N√ÉO metformina
    ("relacoes", 0),     # Q13: Rela√ß√£o HbA1c e complica√ß√µes
    ("contextuais", 0),  # Q19: Escalonamento terap√™utico
    ("contextuais", 3),  # Q22: Caso cl√≠nico obesidade
    ("ambiguas", 4),     # Q28: Metformina gestante (armadilha)
    ("armadilhas", 0),   # Q31: Custo iSGLT2 (n√£o presente)
    ("humanas", 0),      # Q43: Linguagem coloquial
    ("negacoes", 3),     # Q10: Dupla nega√ß√£o HbA1c
]

# ========================================================================
# FUN√á√ïES DE TESTE
# ========================================================================

def test_query(question: str, timeout: int = TIMEOUT) -> Tuple[bool, Dict]:
    """Testa uma query no endpoint"""
    try:
        response = requests.post(
            API_URL,
            json={"question": question},
            timeout=timeout
        )

        if response.status_code == 200:
            return True, response.json()
        else:
            return False, {"error": f"HTTP {response.status_code}", "detail": response.text}

    except requests.exceptions.ConnectionError:
        return False, {"error": "Servidor n√£o est√° rodando"}
    except requests.exceptions.Timeout:
        return False, {"error": f"Timeout ap√≥s {timeout}s"}
    except Exception as e:
        return False, {"error": str(e)}


def classify_response(question: str, response: Dict, category: str) -> Tuple[str, str]:
    """
    Classifica resposta como: sucesso_total, sucesso_parcial, falha, falha_critica
    Retorna: (status, justificativa)
    """
    answer = response.get("answer", "").lower()

    # Detectar "informa√ß√£o n√£o presente"
    info_ausente = "informa√ß√£o" in answer and "n√£o est√° presente" in answer

    # CATEGORIA: ARMADILHAS (deve SEMPRE dizer "n√£o presente")
    if category == "armadilhas":
        if info_ausente:
            return "sucesso_total", "Corretamente identificou informa√ß√£o ausente"
        else:
            return "falha_critica", "üö® ALUCINA√á√ÉO! Respondeu sobre informa√ß√£o n√£o presente"

    # CATEGORIA: AMB√çGUAS (perguntas armadilha com premissa falsa)
    if category == "ambiguas" and any(word in question.lower() for word in ["gestante", "gr√°vida", "abaixo de 5%", "tfg < 15"]):
        # Deve corrigir a premissa falsa
        if "n√£o" in answer or "contraindicad" in answer:
            return "sucesso_total", "Corrigiu premissa falsa da pergunta"
        else:
            return "falha_critica", "üö® N√£o corrigiu premissa falsa!"

    # OUTRAS CATEGORIAS: deve ter resposta substantiva
    if info_ausente:
        return "falha", "Disse que informa√ß√£o n√£o est√° presente (pode estar nos docs)"

    if len(answer) < 50:
        return "sucesso_parcial", "Resposta muito curta"

    if "sources" in response and len(response["sources"]) > 0:
        return "sucesso_total", "Resposta substantiva com fontes"

    return "sucesso_parcial", "Resposta sem fontes citadas"


def print_result(qnum: int, category: str, question: str, status: str, justificativa: str, response: Dict):
    """Imprime resultado formatado"""

    # Cores por status
    status_colors = {
        "sucesso_total": Colors.GREEN,
        "sucesso_parcial": Colors.YELLOW,
        "falha": Colors.RED,
        "falha_critica": Colors.RED + Colors.BOLD,
    }

    status_symbols = {
        "sucesso_total": "‚úÖ",
        "sucesso_parcial": "‚ö†Ô∏è",
        "falha": "‚ùå",
        "falha_critica": "üö®",
    }

    color = status_colors.get(status, Colors.END)
    symbol = status_symbols.get(status, "?")

    print(f"\n{color}{symbol} Q{qnum} [{category}]{Colors.END}")
    print(f"   Pergunta: {question[:80]}...")
    print(f"   Status: {color}{status.upper()}{Colors.END} - {justificativa}")

    if "answer" in response:
        answer_preview = response["answer"][:150].replace("\n", " ")
        print(f"   Resposta: {answer_preview}...")

    if "error" in response:
        print(f"   {Colors.RED}Erro: {response['error']}{Colors.END}")


def run_smoke_test():
    """Executa smoke test (10 perguntas cr√≠ticas)"""
    print(f"\n{Colors.BOLD}{Colors.BLUE}{'='*70}")
    print("üß™ SMOKE TEST - 10 perguntas cr√≠ticas")
    print(f"{'='*70}{Colors.END}\n")

    results = {"sucesso_total": 0, "sucesso_parcial": 0, "falha": 0, "falha_critica": 0}
    details = []

    for idx, (cat, q_idx) in enumerate(SMOKE_TEST, 1):
        question = PERGUNTAS[cat][q_idx]

        print(f"Testando Q{idx}/{len(SMOKE_TEST)}...", end="", flush=True)
        success, response = test_query(question)
        print(" OK" if success else " ERRO")

        if success:
            status, justificativa = classify_response(question, response, cat)
            results[status] += 1
        else:
            status = "falha"
            justificativa = response.get("error", "Erro desconhecido")
            results["falha"] += 1

        print_result(idx, cat, question, status, justificativa, response)
        details.append({
            "qnum": idx,
            "category": cat,
            "question": question,
            "status": status,
            "response": response
        })

        time.sleep(0.5)  # Rate limiting

    # Resumo
    total = len(SMOKE_TEST)
    success_rate = ((results["sucesso_total"] + results["sucesso_parcial"]) / total) * 100

    print(f"\n{Colors.BOLD}{Colors.BLUE}{'='*70}")
    print("üìä RESUMO DO SMOKE TEST")
    print(f"{'='*70}{Colors.END}")
    print(f"  ‚úÖ Sucesso Total:   {results['sucesso_total']}/{total}")
    print(f"  ‚ö†Ô∏è  Sucesso Parcial: {results['sucesso_parcial']}/{total}")
    print(f"  ‚ùå Falhas:          {results['falha']}/{total}")
    print(f"  üö® Falhas Cr√≠ticas: {results['falha_critica']}/{total}")
    print(f"\n  {Colors.BOLD}Taxa de Sucesso: {success_rate:.1f}%{Colors.END}")

    if results["falha_critica"] > 0:
        print(f"\n  {Colors.RED}{Colors.BOLD}‚ö†Ô∏è  ATEN√á√ÉO: {results['falha_critica']} falha(s) cr√≠tica(s) detectada(s)!{Colors.END}")

    # Meta: 8/10 (80%)
    if success_rate >= 80:
        print(f"\n  {Colors.GREEN}üéâ META ATINGIDA! (‚â•80%){Colors.END}")
    else:
        print(f"\n  {Colors.YELLOW}‚ö†Ô∏è  Abaixo da meta de 80%{Colors.END}")

    return details, results


def run_full_test():
    """Executa teste completo (todas as 48 perguntas)"""
    print(f"\n{Colors.BOLD}{Colors.BLUE}{'='*70}")
    print("üî¨ TESTE COMPLETO - 48 perguntas")
    print(f"{'='*70}{Colors.END}\n")

    all_results = {}
    all_details = []
    qnum = 1

    for category, questions in PERGUNTAS.items():
        print(f"\n{Colors.BOLD}üìÅ Categoria: {category.upper()}{Colors.END}")
        cat_results = {"sucesso_total": 0, "sucesso_parcial": 0, "falha": 0, "falha_critica": 0}

        for question in questions:
            print(f"  Testando Q{qnum}...", end="", flush=True)
            success, response = test_query(question)
            print(" OK" if success else " ERRO")

            if success:
                status, justificativa = classify_response(question, response, category)
                cat_results[status] += 1
            else:
                status = "falha"
                justificativa = response.get("error", "Erro desconhecido")
                cat_results["falha"] += 1

            print_result(qnum, category, question, status, justificativa, response)
            all_details.append({
                "qnum": qnum,
                "category": category,
                "question": question,
                "status": status,
                "response": response
            })

            qnum += 1
            time.sleep(0.5)

        # Resumo da categoria
        total = len(questions)
        success = cat_results["sucesso_total"] + cat_results["sucesso_parcial"]
        rate = (success / total) * 100
        print(f"\n  Categoria {category}: {success}/{total} ({rate:.1f}%)")

        all_results[category] = cat_results

    # Resumo geral
    print_full_summary(all_results, all_details)

    return all_details, all_results


def print_full_summary(results: Dict, details: List):
    """Imprime resumo completo"""
    print(f"\n{Colors.BOLD}{Colors.BLUE}{'='*70}")
    print("üìä RESUMO GERAL")
    print(f"{'='*70}{Colors.END}\n")

    # Tabela por categoria
    print(f"{'Categoria':<15} {'‚úÖ Total':<10} {'‚ö†Ô∏è Parcial':<10} {'‚ùå Falha':<10} {'Taxa':<10}")
    print("-" * 70)

    total_success_total = 0
    total_success_parcial = 0
    total_falha = 0
    total_falha_critica = 0
    total_questions = 0

    for cat, res in results.items():
        total = sum(res.values())
        success = res["sucesso_total"] + res["sucesso_parcial"]
        rate = (success / total) * 100 if total > 0 else 0

        total_success_total += res["sucesso_total"]
        total_success_parcial += res["sucesso_parcial"]
        total_falha += res["falha"]
        total_falha_critica += res["falha_critica"]
        total_questions += total

        print(f"{cat:<15} {res['sucesso_total']:<10} {res['sucesso_parcial']:<10} {res['falha'] + res['falha_critica']:<10} {rate:.1f}%")

    print("-" * 70)
    total_rate = ((total_success_total + total_success_parcial) / total_questions) * 100 if total_questions > 0 else 0
    print(f"{'TOTAL':<15} {total_success_total:<10} {total_success_parcial:<10} {total_falha + total_falha_critica:<10} {Colors.BOLD}{total_rate:.1f}%{Colors.END}")

    # Meta geral: ‚â•73%
    print(f"\n{Colors.BOLD}Meta Geral: ‚â•73%{Colors.END}")
    if total_rate >= 73:
        print(f"{Colors.GREEN}‚úÖ META ATINGIDA!{Colors.END}")
    else:
        print(f"{Colors.YELLOW}‚ö†Ô∏è  Abaixo da meta{Colors.END}")

    # Falhas cr√≠ticas
    if total_falha_critica > 0:
        print(f"\n{Colors.RED}{Colors.BOLD}üö® {total_falha_critica} FALHA(S) CR√çTICA(S):{Colors.END}")
        for d in details:
            if d["status"] == "falha_critica":
                print(f"  - Q{d['qnum']}: {d['question'][:60]}...")


def save_results(details: List, results: Dict, filename: str):
    """Salva resultados em JSON"""
    output = {
        "timestamp": datetime.now().isoformat(),
        "summary": results,
        "details": details
    }

    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(output, f, indent=2, ensure_ascii=False)

    print(f"\nüíæ Resultados salvos em: {filename}")


# ========================================================================
# MAIN
# ========================================================================

def main():
    # Verificar se servidor est√° online
    print(f"{Colors.BOLD}üîç Verificando servidor...{Colors.END}")
    success, response = test_query("teste")

    if not success:
        print(f"{Colors.RED}‚ùå Servidor n√£o est√° rodando em {API_URL}{Colors.END}")
        print(f"\nInicie o servidor primeiro:")
        print(f"  python consultar_com_rerank.py --api")
        sys.exit(1)

    print(f"{Colors.GREEN}‚úÖ Servidor online{Colors.END}")

    # Menu
    print(f"\n{Colors.BOLD}Escolha o tipo de teste:{Colors.END}")
    print("  1. Smoke Test (10 perguntas - 5 min)")
    print("  2. Teste Completo (48 perguntas - 30 min)")
    print("  3. Apenas perguntas originais (6 perguntas)")

    choice = input("\nOp√ß√£o (1/2/3): ").strip()

    if choice == "1":
        details, results = run_smoke_test()
        filename = f"smoke_test_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    elif choice == "2":
        details, results = run_full_test()
        filename = f"full_test_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    elif choice == "3":
        # Perguntas originais que falharam
        original = [
            "Qual a rela√ß√£o entre albumin√∫ria e risco cardiovascular segundo a diretriz brasileira de diabetes 2025?",
            "Quais s√£o as contraindica√ß√µes absolutas e relativas da metformina mencionadas no documento?",
            "Em quais situa√ß√µes a diretriz recomenda N√ÉO usar insulina como primeira linha no DM2?",
            "Existem situa√ß√µes onde glicose em jejum normal N√ÉO descarta diabetes?",
            "Qual o valor EXATO de TFG que define risco cardiovascular muito alto segundo a diretriz?",
            "Liste TODOS os valores de HbA1c mencionados no documento e seus respectivos contextos de uso",
        ]

        print(f"\n{Colors.BOLD}üîÑ Testando perguntas originais...{Colors.END}\n")
        details = []
        results = {"sucesso_total": 0, "sucesso_parcial": 0, "falha": 0, "falha_critica": 0}

        for idx, question in enumerate(original, 1):
            print(f"Q{idx}...", end="", flush=True)
            success, response = test_query(question)
            print(" OK" if success else " ERRO")

            status, justificativa = classify_response(question, response, "relacoes")
            results[status] += 1

            print_result(idx, "original", question, status, justificativa, response)
            details.append({"qnum": idx, "question": question, "status": status, "response": response})
            time.sleep(0.5)

        # Meta: 5-6/6
        success_count = results["sucesso_total"] + results["sucesso_parcial"]
        print(f"\n{Colors.BOLD}Resultado: {success_count}/6 ({success_count/6*100:.1f}%){Colors.END}")

        if success_count >= 5:
            print(f"{Colors.GREEN}‚úÖ META ATINGIDA (‚â•5/6)!{Colors.END}")
        else:
            print(f"{Colors.YELLOW}‚ö†Ô∏è  Abaixo da meta de 5/6{Colors.END}")

        filename = f"original_test_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    else:
        print("Op√ß√£o inv√°lida")
        sys.exit(1)

    # Salvar resultados
    save_results(details, results, filename)

    print(f"\n{Colors.BOLD}‚úÖ Teste conclu√≠do!{Colors.END}\n")


if __name__ == "__main__":
    main()
